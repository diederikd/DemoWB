package ConstructionSL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.messageTargets.PropertyMessageTarget;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_AggregateTransactionKind_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_AggregateTransactionKind_NonTypesystemRule() {
  }
  public void applyRule(final SNode aggregateTransactionKind, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (isNotEmptyString(SPropertyOperations.getString(aggregateTransactionKind, MetaAdapterFactory.getProperty(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f0cL, 0x2613bb9aeaa18f0dL, "id")))) {
      if (ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(aggregateTransactionKind), MetaAdapterFactory.getConcept(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f0cL, "ConstructionSL.structure.AggregateTransactionKind"))).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f0cL, 0x2613bb9aeaa18f0dL, "id")).equals(SPropertyOperations.getString(aggregateTransactionKind, MetaAdapterFactory.getProperty(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f0cL, 0x2613bb9aeaa18f0dL, "id"))) && aggregateTransactionKind != it;
        }
      }).isNotEmpty()) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(aggregateTransactionKind, "id of aggregate transactionkind is not unique", "r:193653c7-3212-43f4-a914-3e7a9fb7bf10(ConstructionSL.typesystem)", "5179980272479659944", null, errorTarget);
        }
      }
    }
    if (isEmptyString(SPropertyOperations.getString(aggregateTransactionKind, MetaAdapterFactory.getProperty(0xaa59ea5e1883437fL, 0x95c04dc082aa848cL, 0x2613bb9aeaa032abL, 0x2613bb9aeaa032acL, "name")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        errorTarget = new PropertyMessageTarget("name");
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(aggregateTransactionKind, "aggregate transactionkind should have a name", "r:193653c7-3212-43f4-a914-3e7a9fb7bf10(ConstructionSL.typesystem)", "5179980272479660001", null, errorTarget);
      }
    }
    if (isEmptyString(SPropertyOperations.getString(aggregateTransactionKind, MetaAdapterFactory.getProperty(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f0cL, 0x2613bb9aeaa18f0dL, "id")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        errorTarget = new PropertyMessageTarget("id");
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(aggregateTransactionKind, "aggregate transactionkind should have a unique id", "r:193653c7-3212-43f4-a914-3e7a9fb7bf10(ConstructionSL.typesystem)", "5179980272479660011", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f0cL, "ConstructionSL.structure.AggregateTransactionKind");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
