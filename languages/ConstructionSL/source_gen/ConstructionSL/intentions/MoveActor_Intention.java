package ConstructionSL.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class MoveActor_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public MoveActor_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:ef168a10-3035-49e9-a120-70d71acd7a42(ConstructionSL.intentions)", "397994270028789384"));
  }
  @Override
  public String getPresentation() {
    return "MoveActor";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new MoveActor_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      {
        final SNode scopeOfInterest = SNodeOperations.getParent(node);
        if (SNodeOperations.isInstanceOf(scopeOfInterest, MetaAdapterFactory.getConcept(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa69ec1L, "ConstructionSL.structure.ScopeOfInterest"))) {
          return "Remove this Actor from the scope of interest";
        }
      }
      return "Add this Actor to the scope of interest";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      {
        final SNode scopeOfInterest = SNodeOperations.getParent(node);
        if (SNodeOperations.isInstanceOf(scopeOfInterest, MetaAdapterFactory.getConcept(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa69ec1L, "ConstructionSL.structure.ScopeOfInterest"))) {
          ListSequence.fromList(SLinkOperations.getChildren(scopeOfInterest, MetaAdapterFactory.getContainmentLink(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa69ec1L, 0x2613bb9aeaa1a68cL, "roles"))).removeElement(node);
          ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(scopeOfInterest), MetaAdapterFactory.getConcept(0x61f0ccba8ded47eeL, 0xb0248f1c223c70efL, 0x2613bb9aeaa032b1L, "DemoSL.structure.OrganisationConstructionDiagram")), MetaAdapterFactory.getContainmentLink(0x61f0ccba8ded47eeL, 0xb0248f1c223c70efL, 0x2613bb9aeaa032b1L, 0x2613bb9aeaa1a68cL, "roles"))).addElement(node);
          return;
        }
      }
      {
        final SNode organisationConstructionDiagram = SNodeOperations.getParent(node);
        if (SNodeOperations.isInstanceOf(organisationConstructionDiagram, MetaAdapterFactory.getConcept(0x61f0ccba8ded47eeL, 0xb0248f1c223c70efL, 0x2613bb9aeaa032b1L, "DemoSL.structure.OrganisationConstructionDiagram"))) {
          ListSequence.fromList(SLinkOperations.getChildren(organisationConstructionDiagram, MetaAdapterFactory.getContainmentLink(0x61f0ccba8ded47eeL, 0xb0248f1c223c70efL, 0x2613bb9aeaa032b1L, 0x2613bb9aeaa1a68cL, "roles"))).removeElement(node);
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(organisationConstructionDiagram, MetaAdapterFactory.getContainmentLink(0x61f0ccba8ded47eeL, 0xb0248f1c223c70efL, 0x2613bb9aeaa032b1L, 0x585f5ae0fa3ddaaL, "scopeOfInterest")), MetaAdapterFactory.getContainmentLink(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa69ec1L, 0x2613bb9aeaa1a68cL, "roles"))).addElement(node);
          return;
        }
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return MoveActor_Intention.this;
    }
  }
}
