package ProcessSL.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import ConstructionSL.behavior.TransactionKind__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Link__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, "ProcessSL.structure.Link");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> getTransactionKindFromId_id6z7DEV5Oyvh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTransactionKindFromId").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6z7DEV5Oyvh").registry(REGISTRY).build();
  public static final SMethod<String> getTransactionKindToId_id6z7DEV5OvtJ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTransactionKindToId").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6z7DEV5OvtJ").registry(REGISTRY).build();
  public static final SMethod<String> getStepKindFrom_id6z7DEV5O_li = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getStepKindFrom").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6z7DEV5O_li").registry(REGISTRY).build();
  public static final SMethod<String> getStepKindTo_id6z7DEV5Oxs$ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getStepKindTo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6z7DEV5Oxs$").registry(REGISTRY).build();
  public static final SMethod<Boolean> isExternal_id4obCtttCqTy = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isExternal").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4obCtttCqTy").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getTransactionKindFromId_id6z7DEV5Oyvh, getTransactionKindToId_id6z7DEV5OvtJ, getStepKindFrom_id6z7DEV5O_li, getStepKindTo_id6z7DEV5Oxs$, isExternal_id4obCtttCqTy);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getTransactionKindFromId_id6z7DEV5Oyvh(@NotNull SNode __thisNode__) {
    return (String) TransactionKind__BehaviorDescriptor.getTransactionKindId_id6z7DEV5OneK.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, 0x585f5ae0f86c847L, "transactionKindStepKindFrom")), MetaAdapterFactory.getReferenceLink(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c73eL, 0x585f5ae0f86c73fL, "transactionKind")));
  }
  /*package*/ static String getTransactionKindToId_id6z7DEV5OvtJ(@NotNull SNode __thisNode__) {
    return (String) TransactionKind__BehaviorDescriptor.getTransactionKindId_id6z7DEV5OneK.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, 0x585f5ae0f86c842L, "transactionKindStepKindTo")), MetaAdapterFactory.getReferenceLink(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c73eL, 0x585f5ae0f86c73fL, "transactionKind")));
  }
  /*package*/ static String getStepKindFrom_id6z7DEV5O_li(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString_def(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, 0x585f5ae0f86c847L, "transactionKindStepKindFrom")), MetaAdapterFactory.getProperty(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c73eL, 0x585f5ae0f86c7e6L, "stepKind"), null);
  }
  /*package*/ static String getStepKindTo_id6z7DEV5Oxs$(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString_def(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, 0x585f5ae0f86c842L, "transactionKindStepKindTo")), MetaAdapterFactory.getProperty(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c73eL, 0x585f5ae0f86c7e6L, "stepKind"), null);
  }
  /*package*/ static boolean isExternal_id4obCtttCqTy(@NotNull SNode __thisNode__) {
    return (SPropertyOperations.hasValue(__thisNode__, MetaAdapterFactory.getProperty(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, 0x2e078028fdab53bdL, "linkType"), "initiation", "response") | SPropertyOperations.hasValue(__thisNode__, MetaAdapterFactory.getProperty(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c841L, 0x2e078028fdab53bdL, "linkType"), "wait", "response"));
  }

  /*package*/ Link__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getTransactionKindFromId_id6z7DEV5Oyvh(node));
      case 1:
        return (T) ((String) getTransactionKindToId_id6z7DEV5OvtJ(node));
      case 2:
        return (T) ((String) getStepKindFrom_id6z7DEV5O_li(node));
      case 3:
        return (T) ((String) getStepKindTo_id6z7DEV5Oxs$(node));
      case 4:
        return (T) ((Boolean) isExternal_id4obCtttCqTy(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
