package DemoSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ActionRuleSpecifications;
  private ConceptPresentation props_BankContentsTable;
  private ConceptPresentation props_DerivedFactSpecifications;
  private ConceptPresentation props_ObjectFactDiagram;
  private ConceptPresentation props_OrganisationConstructionDiagram;
  private ConceptPresentation props_TransactionProductTable;
  private ConceptPresentation props_WorkInstructionSpecifications;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionRuleSpecifications:
        if (props_ActionRuleSpecifications == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Action Rule Specifications");
          cpb.presentationByName();
          props_ActionRuleSpecifications = cpb.create();
        }
        return props_ActionRuleSpecifications;
      case LanguageConceptSwitch.BankContentsTable:
        if (props_BankContentsTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Bank Contents Table");
          cpb.presentationByName();
          props_BankContentsTable = cpb.create();
        }
        return props_BankContentsTable;
      case LanguageConceptSwitch.DerivedFactSpecifications:
        if (props_DerivedFactSpecifications == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Derived Fact Specifications");
          cpb.presentationByName();
          props_DerivedFactSpecifications = cpb.create();
        }
        return props_DerivedFactSpecifications;
      case LanguageConceptSwitch.ObjectFactDiagram:
        if (props_ObjectFactDiagram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Object Fact Diagram");
          cpb.presentationByName();
          props_ObjectFactDiagram = cpb.create();
        }
        return props_ObjectFactDiagram;
      case LanguageConceptSwitch.OrganisationConstructionDiagram:
        if (props_OrganisationConstructionDiagram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Organisation Construction Diagram");
          cpb.presentationByName();
          props_OrganisationConstructionDiagram = cpb.create();
        }
        return props_OrganisationConstructionDiagram;
      case LanguageConceptSwitch.TransactionProductTable:
        if (props_TransactionProductTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Transaction Product Table");
          cpb.presentationByName();
          props_TransactionProductTable = cpb.create();
        }
        return props_TransactionProductTable;
      case LanguageConceptSwitch.WorkInstructionSpecifications:
        if (props_WorkInstructionSpecifications == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Work Instruction Specifications");
          cpb.presentationByName();
          props_WorkInstructionSpecifications = cpb.create();
        }
        return props_WorkInstructionSpecifications;
    }
    return null;
  }
}
