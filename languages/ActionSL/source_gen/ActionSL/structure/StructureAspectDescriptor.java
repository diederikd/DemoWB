package ActionSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptActionClause = createDescriptorForActionClause();
  /*package*/ final ConceptDescriptor myConceptActionRule = createDescriptorForActionRule();
  /*package*/ final ConceptDescriptor myConceptAddressee = createDescriptorForAddressee();
  /*package*/ final ConceptDescriptor myConceptAssess = createDescriptorForAssess();
  /*package*/ final ConceptDescriptor myConceptElse = createDescriptorForElse();
  /*package*/ final ConceptDescriptor myConceptIf = createDescriptorForIf();
  /*package*/ final ConceptDescriptor myConceptPerformer = createDescriptorForPerformer();
  /*package*/ final ConceptDescriptor myConceptRespons = createDescriptorForRespons();
  /*package*/ final ConceptDescriptor myConceptThen = createDescriptorForThen();
  /*package*/ final ConceptDescriptor myConceptTransactionReference = createDescriptorForTransactionReference();
  /*package*/ final ConceptDescriptor myConceptWhen = createDescriptorForWhen();
  /*package*/ final ConceptDescriptor myConceptWhile = createDescriptorForWhile();
  /*package*/ final ConceptDescriptor myConceptWhileClause = createDescriptorForWhileClause();
  /*package*/ final ConceptDescriptor myConceptWith = createDescriptorForWith();
  /*package*/ final ConceptDescriptor myConceptWithClause = createDescriptorForWithClause();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptActionClause, myConceptActionRule, myConceptAddressee, myConceptAssess, myConceptElse, myConceptIf, myConceptPerformer, myConceptRespons, myConceptThen, myConceptTransactionReference, myConceptWhen, myConceptWhile, myConceptWhileClause, myConceptWith, myConceptWithClause);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ActionClause:
        return myConceptActionClause;
      case LanguageConceptSwitch.ActionRule:
        return myConceptActionRule;
      case LanguageConceptSwitch.Addressee:
        return myConceptAddressee;
      case LanguageConceptSwitch.Assess:
        return myConceptAssess;
      case LanguageConceptSwitch.Else:
        return myConceptElse;
      case LanguageConceptSwitch.If:
        return myConceptIf;
      case LanguageConceptSwitch.Performer:
        return myConceptPerformer;
      case LanguageConceptSwitch.Respons:
        return myConceptRespons;
      case LanguageConceptSwitch.Then:
        return myConceptThen;
      case LanguageConceptSwitch.TransactionReference:
        return myConceptTransactionReference;
      case LanguageConceptSwitch.When:
        return myConceptWhen;
      case LanguageConceptSwitch.While:
        return myConceptWhile;
      case LanguageConceptSwitch.WhileClause:
        return myConceptWhileClause;
      case LanguageConceptSwitch.With:
        return myConceptWith;
      case LanguageConceptSwitch.WithClause:
        return myConceptWithClause;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForActionClause() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "ActionClause", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57db6aL);
    b.class_(false, false, false);
    b.parent(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57dba1L);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771629418");
    b.version(2);
    b.prop("stepkind", 0x460ba1d75e57db6bL, "5047305753771629419");
    b.associate("transactionKind", 0x460ba1d75e57db6dL).target(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f05L).optional(false).origin("5047305753771629421").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForActionRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "ActionRule", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x585f5ae0f823b54L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/397994270025464660");
    b.version(2);
    b.aggregate("eventPart", 0x460ba1d75e46bdd6L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e449a11L).optional(false).ordered(true).multiple(false).origin("5047305753770507734").done();
    b.aggregate("assessPart", 0x460ba1d75e5644cfL).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e5061a4L).optional(false).ordered(true).multiple(false).origin("5047305753771525327").done();
    b.aggregate("responsPart", 0x460ba1d75e5644d2L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e56459aL).optional(false).ordered(true).multiple(false).origin("5047305753771525330").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAddressee() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "Addressee", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1375660e785be356L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/1402139071330640726");
    b.version(2);
    b.associate("actorRole", 0x1375660e785beaeeL).target(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa032a9L).optional(false).origin("1402139071330642670").done();
    b.alias("The addressee of the .. is the ..");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssess() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "Assess", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e5061a4L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771139492");
    b.version(2);
    b.aggregate("Performer", 0x1375660e785beec7L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1375660e785be355L).optional(true).ordered(true).multiple(false).origin("1402139071330643655").done();
    b.aggregate("Addressee", 0x460ba1d75e606004L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1375660e785be356L).optional(true).ordered(true).multiple(false).origin("5047305753772187652").done();
    b.aggregate("sincerity", 0x460ba1d75e606006L).target(0x6836a913df904e79L, 0x9a37cb334bb02ea5L, 0x460ba1d75e606000L).optional(true).ordered(true).multiple(true).origin("5047305753772187654").done();
    b.aggregate("truth", 0x460ba1d75e606009L).target(0x6836a913df904e79L, 0x9a37cb334bb02ea5L, 0x460ba1d75e606000L).optional(true).ordered(true).multiple(true).origin("5047305753772187657").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForElse() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "Else", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e564599L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771525529");
    b.version(2);
    b.aggregate("actions", 0x460ba1d75e590926L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57db6aL).optional(false).ordered(true).multiple(true).origin("5047305753771706662").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "If", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e5644d6L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771525334");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPerformer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "Performer", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1375660e785be355L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/1402139071330640725");
    b.version(2);
    b.associate("actorRole", 0x1375660e785beaf1L).target(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa032a9L).optional(false).origin("1402139071330642673").done();
    b.alias("The performer of the .. is the ..");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRespons() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "Respons", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e56459aL);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771525530");
    b.version(2);
    b.aggregate("if", 0x460ba1d75e56459bL).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e5644d6L).optional(false).ordered(true).multiple(false).origin("5047305753771525531").done();
    b.aggregate("then", 0x460ba1d75e56459dL).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e564598L).optional(false).ordered(true).multiple(false).origin("5047305753771525533").done();
    b.aggregate("else", 0x460ba1d75e5645a0L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e564599L).optional(true).ordered(true).multiple(false).origin("5047305753771525536").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThen() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "Then", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e564598L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771525528");
    b.version(2);
    b.aggregate("actions", 0x460ba1d75e590920L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57db6aL).optional(false).ordered(true).multiple(true).origin("5047305753771706656").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTransactionReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "TransactionReference", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x5ed15a66c85ec47fL);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/6832341507192571007");
    b.version(2);
    b.associate("transactionKind", 0x5ed15a66c85ec480L).target(0xd87481a388534c7cL, 0x9cb5096d805e832cL, 0x2613bb9aeaa18f05L).optional(false).origin("6832341507192571008").done();
    b.associate("object", 0x5ed15a66c85ec482L).target(0x6836a913df904e79L, 0x9a37cb334bb02ea5L, 0x2613bb9aeaa69f0fL).optional(false).origin("6832341507192571010").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhen() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "When", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e449a11L);
    b.class_(false, false, false);
    b.parent(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57dba1L);
    b.parent(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1e02ac767d0e105dL);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753770367505");
    b.version(2);
    b.prop("stepKind", 0x460ba1d75e44f98bL, "5047305753770391947");
    b.associate("appliesToStepKind", 0x460ba1d75e449a12L).target(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c73eL).optional(true).origin("5047305753770367506").done();
    b.aggregate("transactionReference", 0x5ed15a66c85ec4c4L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x5ed15a66c85ec47fL).optional(false).ordered(true).multiple(false).origin("6832341507192571076").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "While", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1e02ac767d0e078bL);
    b.class_(false, false, false);
    b.parent(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57dba1L);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/2162480395995449227");
    b.version(2);
    b.prop("stepKind", 0x1e02ac767d0e078dL, "2162480395995449229");
    b.associate("appliesToStepKind", 0x1e02ac767d0e078cL).target(0xa2c2ae097c364fbaL, 0x9b645e0450cb1363L, 0x585f5ae0f86c73eL).optional(true).origin("2162480395995449228").done();
    b.aggregate("transactionReference", 0x1e02ac767d0e078fL).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x5ed15a66c85ec47fL).optional(false).ordered(true).multiple(false).origin("2162480395995449231").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhileClause() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "WhileClause", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1e02ac767d0e105dL);
    b.interface_();
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/2162480395995451485");
    b.version(2);
    b.prop("showWhile", 0x1e02ac767d0e105eL, "2162480395995451486");
    b.aggregate("while", 0x1e02ac767d0e105fL).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x1e02ac767d0e078bL).optional(true).ordered(true).multiple(true).origin("2162480395995451487").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWith() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "With", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e5060d8L);
    b.class_(false, false, false);
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771139288");
    b.version(2);
    b.aggregate("formulation", 0x460ba1d75e619f42L).target(0x6836a913df904e79L, 0x9a37cb334bb02ea5L, 0x460ba1d75e606001L).optional(false).ordered(true).multiple(false).origin("5047305753772269378").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWithClause() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ActionSL", "WithClause", 0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57dba1L);
    b.interface_();
    b.origin("r:f3f9f666-f463-4dc0-bd8d-a9e7e33b8917(ActionSL.structure)/5047305753771629473");
    b.version(2);
    b.prop("showWith", 0x460ba1d75e5995d1L, "5047305753771742673");
    b.aggregate("with", 0x460ba1d75e57dba2L).target(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e5060d8L).optional(true).ordered(true).multiple(true).origin("5047305753771629474").done();
    return b.create();
  }
}
