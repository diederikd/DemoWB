package ActionSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ActionClause;
  private ConceptPresentation props_ActionRule;
  private ConceptPresentation props_Addressee;
  private ConceptPresentation props_Assess;
  private ConceptPresentation props_Else;
  private ConceptPresentation props_If;
  private ConceptPresentation props_Performer;
  private ConceptPresentation props_Respons;
  private ConceptPresentation props_Then;
  private ConceptPresentation props_TransactionReference;
  private ConceptPresentation props_When;
  private ConceptPresentation props_With;
  private ConceptPresentation props_WithClause;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionClause:
        if (props_ActionClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xe81fc11716974e77L, 0x8b544a5aa8f4ea97L, 0x460ba1d75e57db6aL, 0x460ba1d75e57db6dL, "transactionKind", "", "");
          props_ActionClause = cpb.create();
        }
        return props_ActionClause;
      case LanguageConceptSwitch.ActionRule:
        if (props_ActionRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ActionRule");
          props_ActionRule = cpb.create();
        }
        return props_ActionRule;
      case LanguageConceptSwitch.Addressee:
        if (props_Addressee == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("The addressee of the .. is the ..");
          props_Addressee = cpb.create();
        }
        return props_Addressee;
      case LanguageConceptSwitch.Assess:
        if (props_Assess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Assess");
          props_Assess = cpb.create();
        }
        return props_Assess;
      case LanguageConceptSwitch.Else:
        if (props_Else == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Else");
          props_Else = cpb.create();
        }
        return props_Else;
      case LanguageConceptSwitch.If:
        if (props_If == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("If");
          props_If = cpb.create();
        }
        return props_If;
      case LanguageConceptSwitch.Performer:
        if (props_Performer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("The performer of the .. is the ..");
          props_Performer = cpb.create();
        }
        return props_Performer;
      case LanguageConceptSwitch.Respons:
        if (props_Respons == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Respons");
          props_Respons = cpb.create();
        }
        return props_Respons;
      case LanguageConceptSwitch.Then:
        if (props_Then == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Then");
          props_Then = cpb.create();
        }
        return props_Then;
      case LanguageConceptSwitch.TransactionReference:
        if (props_TransactionReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TransactionReference");
          props_TransactionReference = cpb.create();
        }
        return props_TransactionReference;
      case LanguageConceptSwitch.When:
        if (props_When == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("When");
          props_When = cpb.create();
        }
        return props_When;
      case LanguageConceptSwitch.With:
        if (props_With == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("With");
          props_With = cpb.create();
        }
        return props_With;
      case LanguageConceptSwitch.WithClause:
        if (props_WithClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_WithClause = cpb.create();
        }
        return props_WithClause;
    }
    return null;
  }
}
