package FactSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Amount;
  private ConceptPresentation props_Area;
  private ConceptPresentation props_AttributeType;
  private ConceptPresentation props_BaseEntityType;
  private ConceptPresentation props_ConstructedEntityType;
  private ConceptPresentation props_Duration;
  private ConceptPresentation props_EntityType;
  private ConceptPresentation props_EventType;
  private ConceptPresentation props_FactType;
  private ConceptPresentation props_IPropertyType;
  private ConceptPresentation props_Length;
  private ConceptPresentation props_Mass;
  private ConceptPresentation props_Number;
  private ConceptPresentation props_PropertyType;
  private ConceptPresentation props_Temperature;
  private ConceptPresentation props_Time;
  private ConceptPresentation props_TruthValue;
  private ConceptPresentation props_ValueType;
  private ConceptPresentation props_Velocity;
  private ConceptPresentation props_Volume;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Amount:
        if (props_Amount == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Amount");
          props_Amount = cpb.create();
        }
        return props_Amount;
      case LanguageConceptSwitch.Area:
        if (props_Area == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Area");
          props_Area = cpb.create();
        }
        return props_Area;
      case LanguageConceptSwitch.AttributeType:
        if (props_AttributeType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeType = cpb.create();
        }
        return props_AttributeType;
      case LanguageConceptSwitch.BaseEntityType:
        if (props_BaseEntityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BaseEntityType = cpb.create();
        }
        return props_BaseEntityType;
      case LanguageConceptSwitch.ConstructedEntityType:
        if (props_ConstructedEntityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConstructedEntityType = cpb.create();
        }
        return props_ConstructedEntityType;
      case LanguageConceptSwitch.Duration:
        if (props_Duration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Duration");
          props_Duration = cpb.create();
        }
        return props_Duration;
      case LanguageConceptSwitch.EntityType:
        if (props_EntityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EntityType = cpb.create();
        }
        return props_EntityType;
      case LanguageConceptSwitch.EventType:
        if (props_EventType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventType = cpb.create();
        }
        return props_EventType;
      case LanguageConceptSwitch.FactType:
        if (props_FactType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FactType = cpb.create();
        }
        return props_FactType;
      case LanguageConceptSwitch.IPropertyType:
        if (props_IPropertyType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IPropertyType = cpb.create();
        }
        return props_IPropertyType;
      case LanguageConceptSwitch.Length:
        if (props_Length == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Length");
          props_Length = cpb.create();
        }
        return props_Length;
      case LanguageConceptSwitch.Mass:
        if (props_Mass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Mass");
          props_Mass = cpb.create();
        }
        return props_Mass;
      case LanguageConceptSwitch.Number:
        if (props_Number == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Number");
          props_Number = cpb.create();
        }
        return props_Number;
      case LanguageConceptSwitch.PropertyType:
        if (props_PropertyType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PropertyType = cpb.create();
        }
        return props_PropertyType;
      case LanguageConceptSwitch.Temperature:
        if (props_Temperature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Temperature");
          props_Temperature = cpb.create();
        }
        return props_Temperature;
      case LanguageConceptSwitch.Time:
        if (props_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Time");
          props_Time = cpb.create();
        }
        return props_Time;
      case LanguageConceptSwitch.TruthValue:
        if (props_TruthValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TruthValue");
          props_TruthValue = cpb.create();
        }
        return props_TruthValue;
      case LanguageConceptSwitch.ValueType:
        if (props_ValueType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ValueType = cpb.create();
        }
        return props_ValueType;
      case LanguageConceptSwitch.Velocity:
        if (props_Velocity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Velocity");
          props_Velocity = cpb.create();
        }
        return props_Velocity;
      case LanguageConceptSwitch.Volume:
        if (props_Volume == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Volume");
          props_Volume = cpb.create();
        }
        return props_Volume;
    }
    return null;
  }
}
