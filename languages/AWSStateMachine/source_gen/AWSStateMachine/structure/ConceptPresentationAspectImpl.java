package AWSStateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BooleanValue;
  private ConceptPresentation props_ChoiceRule;
  private ConceptPresentation props_Comparison;
  private ConceptPresentation props_IntegerValue;
  private ConceptPresentation props_State;
  private ConceptPresentation props_StateInput;
  private ConceptPresentation props_StateMachine;
  private ConceptPresentation props_StringValue;
  private ConceptPresentation props_Value;
  private ConceptPresentation props_Variable;
  private ConceptPresentation props_VariableReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BooleanValue:
        if (props_BooleanValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanValue");
          props_BooleanValue = cpb.create();
        }
        return props_BooleanValue;
      case LanguageConceptSwitch.ChoiceRule:
        if (props_ChoiceRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xad34076bb44b4b8eL, 0x9aa6566fa22fe764L, 0x4c74ef895ad44f4aL, 0x4c74ef895ad71a29L, "Next", "", "");
          props_ChoiceRule = cpb.create();
        }
        return props_ChoiceRule;
      case LanguageConceptSwitch.Comparison:
        if (props_Comparison == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xad34076bb44b4b8eL, 0x9aa6566fa22fe764L, 0x4c74ef895ad48f71L, 0x4c74ef895ad89219L, "Variable", "", "");
          props_Comparison = cpb.create();
        }
        return props_Comparison;
      case LanguageConceptSwitch.IntegerValue:
        if (props_IntegerValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntegerValue");
          props_IntegerValue = cpb.create();
        }
        return props_IntegerValue;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.StateInput:
        if (props_StateInput == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StateInput");
          props_StateInput = cpb.create();
        }
        return props_StateInput;
      case LanguageConceptSwitch.StateMachine:
        if (props_StateMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StateMachine = cpb.create();
        }
        return props_StateMachine;
      case LanguageConceptSwitch.StringValue:
        if (props_StringValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StringValue");
          props_StringValue = cpb.create();
        }
        return props_StringValue;
      case LanguageConceptSwitch.Value:
        if (props_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Value = cpb.create();
        }
        return props_Value;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Variable = cpb.create();
        }
        return props_Variable;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xad34076bb44b4b8eL, 0x9aa6566fa22fe764L, 0x4c74ef895ad48f7eL, 0x4c74ef895ad48f7fL, "variable", "", "");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
    }
    return null;
  }
}
